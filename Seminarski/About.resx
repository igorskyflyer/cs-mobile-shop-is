<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAACAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ2d
        nSLMzMy12dnZ7NjY2O/Y2Njv2NjY79jY2O/Y2Njv2NjY79jY2O/Y2Njv2NjY79jY2O/Z2dnszMzMtZ2d
        nSIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACZmZkFzs7O22ZmZv8ZGBn/GBgY/xsbG/8fHh//IiEi/ygnKP8qKir/Kyor/y4tLv8yMDL/NTM1/zs6
        O/+AfoD/zs7O3JmZmQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJiYmDednZ3/AgIC/wYGBv8KCQr/DQwN/xAQEP8cGxz/RENE/0NCQ/8jIiP/IiAi/yUk
        Jf8oJyj/LCos/zAuMP+tra3/lpaWOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AP//AAD//wAA//+AAf////////////////8=
</value>
  </data>
</root>